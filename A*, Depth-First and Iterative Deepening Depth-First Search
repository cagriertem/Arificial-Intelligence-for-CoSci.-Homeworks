{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e4f4403c",
   "metadata": {},
   "source": [
    "# Assignment 2\n",
    "\n",
    "Please enter your **name, surname** and **student number** instead of `\"NAME-HERE\"`, `\"SURNAME-HERE\"`, `\"NUMBER-HERE\"` below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "61606837",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'Çağrı', 'surname': 'Ertem', 'studentNumber': '2360626'}\n"
     ]
    }
   ],
   "source": [
    "student = {\n",
    "    'name' : \"Çağrı\" ,\n",
    "    'surname' : \"Ertem\", \n",
    "    'studentNumber' : \"2360626\"\n",
    "}\n",
    "\n",
    "print(student)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8f47830",
   "metadata": {},
   "source": [
    "In this assignment you will implement depth-first, iterative deepening and A* search algorithms. You will use these algoritms for a goal-based problem solving agent that navigates in a maze. "
   ]
  },
  {
   "attachments": {
    "maze1.png": {
     "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV4AAAEsCAYAAACLwdvQAAAFAUlEQVR4nO3Yy2ksSRBA0eyhDRBoOwakQ2PlcygNeFuBDBD0rLrQvuBmf85ZxTKCUl8SXcYYtwFA5p/dCwC8m+t9mHPu3OOUtdYxu2M/dzyW33eMP//uW+Ss//4e47N/Dy9egJjwAsSEFyAmvAAx4QWICS9ATHgBYsILEBNegJjwAsSEFyAmvAAx4QWICS9ATHgBYsILEBNegJjwAsSEFyAmvAAx4QWICS9ATHgBYsILEBNegJjwAsSEFyAmvAAx4QWICS9ATHgBYsILEBNegJjwAsSEFyAmvAAx4QWICS9ATHgBYsILEBNegJjwAsSEFyAmvAAx4QWICS9A7DLGuO1eAuCdePECxIQXIHa9D3POnXucstY6Znfs547H8vuOr++fjZuc8/lx5Orpv4cXL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXIHYZY9x2LwHwTrx4AWLCCxC73oc55849TllrHbM79nvFO76+fzZucs7nx/Ezf5k7nv3vyosXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQu4wxbruXAHgnXrwAMeEFiF3vw5xz5x6nrLWO2R37veIdX98/Gzc55/Pj+Jm/zPd49ju8eAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ALHLGOO2ewmAd+LFCxATXoDY9T58ff/s3OOUz4/jDHc8AHc8lt93zDk3bnLOWuuYn/0OL16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0DsMsa47V4C4J148QLEhBcgdr0Pz/z/hsuvec65bY+z1lrH7I793PFYXukOL16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0BMeAFiwgsQE16AmPACxIQXICa8ADHhBYgJL0DsMsa47V4C4J38D4uYhFcb8nQoAAAAAElFTkSuQmCC"
    }
   },
   "cell_type": "markdown",
   "id": "7e81019d",
   "metadata": {},
   "source": [
    "## Maze\n",
    "\n",
    "The mazes will be defined using a multi-line string as follows. Note that multiline strings in python are defined by triple quotes `\"\"\"`. \n",
    "\n",
    "In a maze string:\n",
    "- `A` will represent the initial state of the agent\n",
    "- `B` will represent the goal state\n",
    "- `#` will represent the inaccessible locatoins (walls) that cannot be passed through by the agent\n",
    "- ` ` will represent spaces (corridors) that can be passed through by the agent.\n",
    "\n",
    "For example the following string\n",
    "\n",
    "~~~~python\n",
    "mazemap1 = \"\"\"\n",
    "#####B#\n",
    "##### #\n",
    "####  #\n",
    "#### ##\n",
    "     ##\n",
    "A######\n",
    "\"\"\"\n",
    "~~~~\n",
    "is equivalent to the maze picture below.\n",
    "\n",
    "![maze1.png](attachment:maze1.png)\n",
    "\n",
    "Alternatively you can define a maze in a separate text file by using the same rules and read that text file.\n",
    "\n",
    "When you define a maze make sure that every line is composed of `#`, ` `, `A`, or `B`, and has the same number of characters)\n",
    "\n",
    "*Note: This maze example has been adapted from Harvard Open Courseware*\n",
    "\n",
    "#### Problem Class\n",
    "Below we define the class of our problem:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cff29687",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Maze:\n",
    "    def __init__(self, mazemap=None, filename=None):\n",
    "\n",
    "        if mazemap is not None:\n",
    "            # Read the maze from a multiline string\n",
    "            contents = mazemap.strip(\"\\n\")\n",
    "        elif filename is not None:\n",
    "            # Read the maze from a text file\n",
    "            with open(filename) as f:\n",
    "                contents = f.read()\n",
    "        else:\n",
    "            raise Exception(\n",
    "                \"Maze must be provided either as a multiline string with mazemap argument or in a text file with filename argument\"\n",
    "            )\n",
    "\n",
    "        # Validate start and goal\n",
    "        if contents.count(\"A\") != 1:\n",
    "            raise Exception(\"maze must have exactly one start point\")\n",
    "        if contents.count(\"B\") != 1:\n",
    "            raise Exception(\"maze must have exactly one goal\")\n",
    "\n",
    "        # Determine height and width of maze\n",
    "        contents = contents.splitlines()\n",
    "        self.height = len(contents)\n",
    "        self.width = max(len(line) for line in contents)\n",
    "\n",
    "        # Keep track of walls\n",
    "        self.walls = []\n",
    "        for i in range(self.height):\n",
    "            row = []\n",
    "            for j in range(self.width):\n",
    "                try:\n",
    "                    if contents[i][j] == \"A\":\n",
    "                        self.initial = (i, j)\n",
    "                        row.append(False)\n",
    "                    elif contents[i][j] == \"B\":\n",
    "                        self.goal = (i, j)\n",
    "                        row.append(False)\n",
    "                    elif contents[i][j] == \" \":\n",
    "                        row.append(False)\n",
    "                    else:\n",
    "                        row.append(True)\n",
    "                except IndexError:\n",
    "                    row.append(False)\n",
    "            self.walls.append(row)\n",
    "\n",
    "        self.solution = None\n",
    "\n",
    "    def goal_test(self, state):\n",
    "        return self.goal == state\n",
    "\n",
    "    def action_cost(self, state1, action, state2):\n",
    "        return 1\n",
    "\n",
    "    def actions(self, state):\n",
    "        row, col = state\n",
    "        candidates = [\n",
    "            (\"up\", (row - 1, col)),\n",
    "            (\"down\", (row + 1, col)),\n",
    "            (\"left\", (row, col - 1)),\n",
    "            (\"right\", (row, col + 1)),\n",
    "        ]\n",
    "\n",
    "        moves = []\n",
    "        for action, (r, c) in candidates:\n",
    "            if 0 <= r < self.height and 0 <= c < self.width and not self.walls[r][c]:\n",
    "                moves.append(action)\n",
    "        return moves\n",
    "\n",
    "    def result(self, state, action):\n",
    "        row, col = state\n",
    "\n",
    "        if action == \"up\":\n",
    "            row -= 1\n",
    "        elif action == \"left\":\n",
    "            col -= 1\n",
    "        elif action == \"right\":\n",
    "            col += 1\n",
    "        elif action == \"down\":\n",
    "            row += 1\n",
    "        return (row, col)\n",
    "\n",
    "    def get_solution(self, node):\n",
    "        if not self.goal_test(node.state):\n",
    "            raise Exception(\"This node does not include a sollution.\")\n",
    "        actions = []\n",
    "        cells = []\n",
    "        while node.parent is not None:\n",
    "            actions.append(node.action)\n",
    "            cells.append(node.state)\n",
    "            node = node.parent\n",
    "        actions.reverse()\n",
    "        cells.reverse()\n",
    "        self.solution = (actions, cells)\n",
    "        return self.solution\n",
    "\n",
    "    def output_image(self, filename=None, show_solution=True, show_explored=False):\n",
    "        from PIL import Image, ImageDraw\n",
    "        from matplotlib import pyplot\n",
    "\n",
    "        cell_size = 50\n",
    "        cell_border = 2\n",
    "\n",
    "        # Create a blank canvas\n",
    "        img = Image.new(\n",
    "            \"RGBA\", (self.width * cell_size, self.height * cell_size), \"black\"\n",
    "        )\n",
    "        draw = ImageDraw.Draw(img)\n",
    "\n",
    "        solution = self.solution[1] if self.solution is not None else None\n",
    "        for i, row in enumerate(self.walls):\n",
    "            for j, col in enumerate(row):\n",
    "\n",
    "                # Walls\n",
    "                if col:\n",
    "                    fill = (40, 40, 40)\n",
    "\n",
    "                # Start\n",
    "                elif (i, j) == self.initial:\n",
    "                    fill = (255, 0, 0)\n",
    "\n",
    "                # Goal\n",
    "                elif (i, j) == self.goal:\n",
    "                    fill = (0, 171, 28)\n",
    "\n",
    "                # Solution\n",
    "                elif solution is not None and show_solution and (i, j) in solution:\n",
    "                    fill = (220, 235, 113)\n",
    "\n",
    "                # Explored\n",
    "                elif solution is not None and show_explored and (i, j) in self.explored:\n",
    "                    fill = (212, 97, 85)\n",
    "\n",
    "                # Empty cell\n",
    "                else:\n",
    "                    fill = (237, 240, 252)\n",
    "\n",
    "                # Draw cell\n",
    "                draw.rectangle(\n",
    "                    (\n",
    "                        [\n",
    "                            (j * cell_size + cell_border, i * cell_size + cell_border),\n",
    "                            (\n",
    "                                (j + 1) * cell_size - cell_border,\n",
    "                                (i + 1) * cell_size - cell_border,\n",
    "                            ),\n",
    "                        ]\n",
    "                    ),\n",
    "                    fill=fill,\n",
    "                )\n",
    "        pyplot.imshow(img)\n",
    "\n",
    "        if filename is not None:\n",
    "            img.save(filename)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7044803",
   "metadata": {},
   "source": [
    "Lets define a map environment using this problem class below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "85caeacb",
   "metadata": {},
   "outputs": [],
   "source": [
    "mazemap1 = \"\"\"\n",
    "#####B#\n",
    "##### #\n",
    "####  #\n",
    "#### ##\n",
    "     ##\n",
    "A######\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9928b763",
   "metadata": {},
   "outputs": [],
   "source": [
    "maze1 = Maze(mazemap1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c2d1051",
   "metadata": {},
   "source": [
    "You can draw an image of the maze environment as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e6ceba5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "maze1.output_image()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9fbda11",
   "metadata": {},
   "source": [
    "The state of the environment are defined by a tuple containing `(row, column)` indices where the top-left cell is `(0,0)`. For example the initial state is the red point `(5,0)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "97d0fcc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 0)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze1.initial"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bfc98b6",
   "metadata": {},
   "source": [
    "The goal state is the green cell which is `(0,5)` "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "deead390",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0, 5)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze1.goal"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d1e50b0",
   "metadata": {},
   "source": [
    "Possible actions are:\n",
    "- `up`\n",
    "- `down` \n",
    "- `left` \n",
    "- `right`\n",
    "but of course not every action can be made in every step.\n",
    "`actions` method returns the allowable actions in a state. For example, you can either go `down` or `right` in `(4,0)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e5f9b4dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['down', 'right']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze1.actions((4,0))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "204d3332",
   "metadata": {},
   "source": [
    "`result` method is the transition model which returns the resulting state when you make an action in a given state. For example, if you move `'right'` in `(4,0)` you end up in `(4,1)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "27900180",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 1)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze1.result((4,0),'right')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec19468f",
   "metadata": {},
   "source": [
    "`goal_test` method will take in a state and return `True` if that state is the goal state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "43fc7d42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze1.goal_test((4,0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "18ff83ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze1.goal_test((0,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "606cd4ea",
   "metadata": {},
   "source": [
    "Finally, `get_solution` method will take in a `Node` and if that `Node` belongs to solution will compute the actions and states that lead to a solution. Once you call `get_solution` with a solution, the `output_image` method will display the solution in red colour. Currently we have not found a solution, so `output_image` does not show it."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfbe5abc",
   "metadata": {},
   "source": [
    "## Node and `expand()`\n",
    "Below are some functions that you may be useful when implementing your search algorithms\n",
    "- **Node**: The node data structure for the search tree.\n",
    "- **expand()**: Function for expanding the nodes in the frontier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d0b35bd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Node:\n",
    "    def __init__(self, state, parent=None, action=None, path_cost=0):\n",
    "        self.state = state\n",
    "        self.parent = parent\n",
    "        self.action = action\n",
    "        self.path_cost = path_cost\n",
    "        if parent:\n",
    "            self.depth = parent.depth + 1\n",
    "        else:\n",
    "            self.depth = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a10bab04",
   "metadata": {},
   "outputs": [],
   "source": [
    "def expand(problem, node):\n",
    "    s = node.state\n",
    "    nodes = []\n",
    "    for action in problem.actions(s):\n",
    "        child_state = problem.result(s, action)\n",
    "        cost = node.path_cost + problem.action_cost(s, action, child_state)\n",
    "        yield Node(child_state, node, action, cost)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5157d95",
   "metadata": {},
   "source": [
    "## Other mazes for the assignment\n",
    "Below two other maze environments apart from `maze1` is available to test your model. Test your algorithms with `maze1` first as this is the simplest maze."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4be23558",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mazemap2 = \"\"\"\n",
    "##    #\n",
    "## ## #\n",
    "#B #  #\n",
    "# ## ##\n",
    "     ##\n",
    "A######\n",
    "\"\"\"\n",
    "maze2 = Maze(mazemap2)\n",
    "maze2.output_image()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3a878125",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mazemap3 = \"\"\"\n",
    "###                 #########\n",
    "#   ###################   # #\n",
    "# ####                # # # #\n",
    "# ################### # # # #\n",
    "#                     # # # #\n",
    "##################### # # # #\n",
    "#   ##                # # # #\n",
    "# # ## ### ## ######### # # #\n",
    "# #    #   ##B#         # # #\n",
    "# # ## ################ # # #\n",
    "### ##             #### # # #\n",
    "### ############## ## # # # #\n",
    "###             ##    # # # #\n",
    "###### ######## ####### # # #\n",
    "###### ####             #   #\n",
    "A      ######################\n",
    "\"\"\"\n",
    "maze3 = Maze(mazemap3)\n",
    "maze3.output_image()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e426664",
   "metadata": {},
   "source": [
    "## Tasks\n",
    "\n",
    "### a) Depth-First Search (25)\n",
    "\n",
    "Implement the depth-first search algorithm for the problem. Run the algorithm for the three maze problems above and report **path_cost**, **nodes_expanded**, **max_search_depth**, **max_frontier_nodes** and **running_time** for the solution (check homework for more information). You can implement an additional function to gather these parameters and print them in a readable format. Show the solution as well preferably using `output_image`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "00ee8cec",
   "metadata": {},
   "outputs": [],
   "source": [
    "import queue as Q\n",
    "L = Q.LifoQueue()\n",
    "\n",
    "def dfs3(problem):\n",
    "    frontier = Q.LifoQueue()\n",
    "    start = Node(problem.initial)\n",
    "    frontier.put(start)\n",
    "    explored = {start.state: start}\n",
    "    \n",
    "    # Number of states explored\n",
    "    num_explored = 0\n",
    "    # Number of nodes expanded\n",
    "    nodes_expanded = 0\n",
    "    # Max search depth\n",
    "    max_search_depth = 1\n",
    "    # Max frontier number\n",
    "    max_frontier_nodes = 1\n",
    "    \n",
    "    while True:\n",
    "        if frontier.empty():\n",
    "            raise Exception(\"could not be solved\")\n",
    "        \n",
    "        node = frontier.get()\n",
    "        num_explored += 1\n",
    "        \n",
    "        if problem.goal_test(node.state):\n",
    "            print(\"Solved! Number of states explored: {}\".format(num_explored))\n",
    "            print(\"Number of nodes expanded: {}\".format(nodes_expanded))\n",
    "            print(\"Max Search Depth: {}\".format(max_search_depth))\n",
    "            #print(\"Path Cost: {}\".format(Node.path_cost))\n",
    "            print(\"Max Frontier Nodes: {}\".format(max_frontier_nodes))\n",
    "            return node\n",
    "        \n",
    "        for child in expand(problem, node):\n",
    "            if child.state not in explored:\n",
    "                frontier.put(child)\n",
    "                explored[child.state] = child\n",
    "    \n",
    "        # Number of nodes expanded\n",
    "        if node.parent:\n",
    "                nodes_expanded += 1\n",
    "                \n",
    "        # Max search depth        \n",
    "        if node.depth > max_search_depth:\n",
    "            max_search_depth = node.depth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "eaf58b13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 11\n",
      "Number of nodes expanded: 9\n",
      "Max Search Depth: 9\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(['up', 'right', 'right', 'right', 'right', 'up', 'up', 'right', 'up', 'up'],\n",
       " [(4, 0),\n",
       "  (4, 1),\n",
       "  (4, 2),\n",
       "  (4, 3),\n",
       "  (4, 4),\n",
       "  (3, 4),\n",
       "  (2, 4),\n",
       "  (2, 5),\n",
       "  (1, 5),\n",
       "  (0, 5)])"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze1.get_solution(dfs3(maze1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "dcc8006d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 11\n",
      "Number of nodes expanded: 9\n",
      "Max Search Depth: 9\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<__main__.Node at 0x7fe159da4a00>"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfs3(maze1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "7cde9398",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 11\n",
      "Number of nodes expanded: 9\n",
      "Max Search Depth: 9\n",
      "Max Frontier Nodes: 1\n",
      "CPU times: user 462 µs, sys: 47 µs, total: 509 µs\n",
      "Wall time: 473 µs\n"
     ]
    }
   ],
   "source": [
    "%time res = dfs3(maze1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "a134c349",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "maze1.output_image()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "f81460ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 17\n",
      "Number of nodes expanded: 15\n",
      "Max Search Depth: 15\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(['up',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'up',\n",
       "  'up',\n",
       "  'right',\n",
       "  'up',\n",
       "  'up',\n",
       "  'left',\n",
       "  'left',\n",
       "  'left',\n",
       "  'down',\n",
       "  'down',\n",
       "  'left'],\n",
       " [(4, 0),\n",
       "  (4, 1),\n",
       "  (4, 2),\n",
       "  (4, 3),\n",
       "  (4, 4),\n",
       "  (3, 4),\n",
       "  (2, 4),\n",
       "  (2, 5),\n",
       "  (1, 5),\n",
       "  (0, 5),\n",
       "  (0, 4),\n",
       "  (0, 3),\n",
       "  (0, 2),\n",
       "  (1, 2),\n",
       "  (2, 2),\n",
       "  (2, 1)])"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze2.get_solution(dfs3(maze2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "e9da8c1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 17\n",
      "Number of nodes expanded: 15\n",
      "Max Search Depth: 15\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<__main__.Node at 0x7fe15a6064c0>"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfs3(maze2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "2d07a186",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 17\n",
      "Number of nodes expanded: 15\n",
      "Max Search Depth: 15\n",
      "Max Frontier Nodes: 1\n",
      "CPU times: user 792 µs, sys: 111 µs, total: 903 µs\n",
      "Wall time: 807 µs\n"
     ]
    }
   ],
   "source": [
    "%time res = dfs3(maze2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "f963129c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "maze2.output_image()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "345ae605",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 194\n",
      "Number of nodes expanded: 192\n",
      "Max Search Depth: 80\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(['right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'up',\n",
       "  'up',\n",
       "  'up',\n",
       "  'left',\n",
       "  'left',\n",
       "  'left',\n",
       "  'up',\n",
       "  'up',\n",
       "  'up',\n",
       "  'up',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'up',\n",
       "  'up',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'down',\n",
       "  'down'],\n",
       " [(15, 1),\n",
       "  (15, 2),\n",
       "  (15, 3),\n",
       "  (15, 4),\n",
       "  (15, 5),\n",
       "  (15, 6),\n",
       "  (14, 6),\n",
       "  (13, 6),\n",
       "  (12, 6),\n",
       "  (12, 5),\n",
       "  (12, 4),\n",
       "  (12, 3),\n",
       "  (11, 3),\n",
       "  (10, 3),\n",
       "  (9, 3),\n",
       "  (8, 3),\n",
       "  (8, 4),\n",
       "  (8, 5),\n",
       "  (8, 6),\n",
       "  (7, 6),\n",
       "  (6, 6),\n",
       "  (6, 7),\n",
       "  (6, 8),\n",
       "  (6, 9),\n",
       "  (6, 10),\n",
       "  (6, 11),\n",
       "  (6, 12),\n",
       "  (6, 13),\n",
       "  (7, 13),\n",
       "  (8, 13)])"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze3.get_solution(dfs3(maze3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "fba27cf9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 194\n",
      "Number of nodes expanded: 192\n",
      "Max Search Depth: 80\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<__main__.Node at 0x7fe15a76a520>"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfs3(maze3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "c93d3641",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 194\n",
      "Number of nodes expanded: 192\n",
      "Max Search Depth: 80\n",
      "Max Frontier Nodes: 1\n",
      "CPU times: user 6.73 ms, sys: 1.39 ms, total: 8.12 ms\n",
      "Wall time: 7 ms\n"
     ]
    }
   ],
   "source": [
    "%time res = dfs3(maze3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "ed987111",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "maze3.output_image()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1688a605",
   "metadata": {},
   "source": [
    "### b) Iterative Deepening Depth-Limited Search (15)\n",
    "\n",
    "Implement the iterative deepening depth-limited search algorithm for the problem. Run the algorithm for the three maze problems above, and report the same statistics and solution described in question a) above. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "id": "e42f7603",
   "metadata": {},
   "outputs": [],
   "source": [
    "import queue as Q\n",
    "\n",
    "def ids(problem):\n",
    "    frontier = Q.Queue()\n",
    "    start = Node(problem.initial)\n",
    "    frontier.put(start)\n",
    "    explored = {start.state: start}\n",
    "    \n",
    "    # Number of states explored\n",
    "    num_explored = 0\n",
    "    # Number of nodes expanded\n",
    "    nodes_expanded = 0\n",
    "    # Max search depth\n",
    "    max_search_depth = 1\n",
    "    # Max frontier nodes\n",
    "    max_frontier_nodes = 1\n",
    "    \n",
    "    while True:\n",
    "        if frontier.empty():\n",
    "            raise Exception(\"could not be solved\")\n",
    "            \n",
    "        node = frontier.get()\n",
    "        num_explored += 1 \n",
    "        \n",
    "        # Number of nodes expanded\n",
    "        if node.parent:\n",
    "            nodes_expanded += 1\n",
    "            \n",
    "        # Max search depth        \n",
    "        if node.depth > max_search_depth:\n",
    "            max_search_depth = node.depth    \n",
    "        \n",
    "        if problem.goal_test(node.state):\n",
    "            print(\"Solved! Number of states explored: {}\".format(num_explored))\n",
    "            print(\"Number of nodes expanded: {}\".format(nodes_expanded))\n",
    "            print(\"Max Search Depth: {}\".format(max_search_depth))\n",
    "            #print(\"Path Cost: {}\".format(Node.path_cost))\n",
    "            print(\"Max Frontier Nodes: {}\".format(max_frontier_nodes))\n",
    "            return node\n",
    "                \n",
    "        for child in expand(problem, node): \n",
    "            if child.state not in explored:\n",
    "                frontier.put(child)\n",
    "                explored[child.state] = child\n",
    "                \n",
    "        if frontier.empty():\n",
    "            frontier.put(start)\n",
    "            depth_limit += 1\n",
    "            explored = {start.state: start} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "6ec9aa55",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 11\n",
      "Number of nodes expanded: 10\n",
      "Max Search Depth: 10\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(['up', 'right', 'right', 'right', 'right', 'up', 'up', 'right', 'up', 'up'],\n",
       " [(4, 0),\n",
       "  (4, 1),\n",
       "  (4, 2),\n",
       "  (4, 3),\n",
       "  (4, 4),\n",
       "  (3, 4),\n",
       "  (2, 4),\n",
       "  (2, 5),\n",
       "  (1, 5),\n",
       "  (0, 5)])"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze1.get_solution(ids(maze1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "id": "23226c48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 11\n",
      "Number of nodes expanded: 10\n",
      "Max Search Depth: 10\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<__main__.Node at 0x7fe15a75f340>"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ids(maze1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "id": "be46f45b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 11\n",
      "Number of nodes expanded: 10\n",
      "Max Search Depth: 10\n",
      "Max Frontier Nodes: 1\n",
      "CPU times: user 569 µs, sys: 97 µs, total: 666 µs\n",
      "Wall time: 616 µs\n"
     ]
    }
   ],
   "source": [
    "%time res = ids(maze1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "id": "c91b1d5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "maze1.output_image()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "239a3c73",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 6\n",
      "Number of nodes expanded: 5\n",
      "Max Search Depth: 4\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(['up', 'right', 'up', 'up'], [(4, 0), (4, 1), (3, 1), (2, 1)])"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze2.get_solution(ids(maze2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "id": "6c1eed0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 6\n",
      "Number of nodes expanded: 5\n",
      "Max Search Depth: 4\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<__main__.Node at 0x7fe172c68df0>"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ids(maze2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "3bfab0f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 6\n",
      "Number of nodes expanded: 5\n",
      "Max Search Depth: 4\n",
      "Max Frontier Nodes: 1\n",
      "CPU times: user 334 µs, sys: 53 µs, total: 387 µs\n",
      "Wall time: 343 µs\n"
     ]
    }
   ],
   "source": [
    "%time res = ids(maze2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "9026c23a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "maze2.output_image()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "id": "ed1835ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 77\n",
      "Number of nodes expanded: 76\n",
      "Max Search Depth: 30\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(['right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'up',\n",
       "  'up',\n",
       "  'up',\n",
       "  'left',\n",
       "  'left',\n",
       "  'left',\n",
       "  'up',\n",
       "  'up',\n",
       "  'up',\n",
       "  'up',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'up',\n",
       "  'up',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'right',\n",
       "  'down',\n",
       "  'down'],\n",
       " [(15, 1),\n",
       "  (15, 2),\n",
       "  (15, 3),\n",
       "  (15, 4),\n",
       "  (15, 5),\n",
       "  (15, 6),\n",
       "  (14, 6),\n",
       "  (13, 6),\n",
       "  (12, 6),\n",
       "  (12, 5),\n",
       "  (12, 4),\n",
       "  (12, 3),\n",
       "  (11, 3),\n",
       "  (10, 3),\n",
       "  (9, 3),\n",
       "  (8, 3),\n",
       "  (8, 4),\n",
       "  (8, 5),\n",
       "  (8, 6),\n",
       "  (7, 6),\n",
       "  (6, 6),\n",
       "  (6, 7),\n",
       "  (6, 8),\n",
       "  (6, 9),\n",
       "  (6, 10),\n",
       "  (6, 11),\n",
       "  (6, 12),\n",
       "  (6, 13),\n",
       "  (7, 13),\n",
       "  (8, 13)])"
      ]
     },
     "execution_count": 251,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze3.get_solution(ids(maze3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "id": "75b1ad3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 77\n",
      "Number of nodes expanded: 76\n",
      "Max Search Depth: 30\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<__main__.Node at 0x7fe172cae310>"
      ]
     },
     "execution_count": 252,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ids(maze3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "id": "e173c0f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 77\n",
      "Number of nodes expanded: 76\n",
      "Max Search Depth: 30\n",
      "Max Frontier Nodes: 1\n",
      "CPU times: user 2.25 ms, sys: 131 µs, total: 2.38 ms\n",
      "Wall time: 2.34 ms\n"
     ]
    }
   ],
   "source": [
    "%time res = ids(maze3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "id": "872aed45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "maze3.output_image()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3babac8e",
   "metadata": {},
   "source": [
    "### c) A* (60)\n",
    "\n",
    "Implement the A* algorithm for the problem. Run A* algortihms with at least **two heuristics** for the three maze problems discussed above. Show the solutions of A* algorithms preferably by using `output_image`. Compare the results of these algorithms with each other and also with the algorithms you implemented in the previous sections using the same statistics as described in question a). Discuss these results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "id": "e428cacf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import queue as Q\n",
    "L = Q.PriorityQueue\n",
    "\n",
    "def heuristic1(goal_state, node_state):\n",
    "    x = abs(goal_state[0] - node_state[0])\n",
    "    y = abs(goal_state[1] - node_state[1])\n",
    "    return x + y\n",
    "\n",
    "def heuristic2(goal_state, node_state):\n",
    "    x = abs(goal_state[0] - node_state[0])\n",
    "    y = abs(goal_state[1] - node_state[1])\n",
    "    return math.sqrt(x * x + y * y)\n",
    "\n",
    "#A*/A*/A*#\n",
    "\n",
    "def a_star(problem, heuristic = None):\n",
    "    frontier = Q.PriorityQueue()\n",
    "    start = Node(problem.initial)\n",
    "    frontier.put(start, 0)    \n",
    "    explored = {start.state: start}\n",
    "     \n",
    "    # Number of states explored\n",
    "    num_explored = 0\n",
    "    # Number of nodes expanded\n",
    "    nodes_expanded = 0\n",
    "    # Max search depth\n",
    "    max_search_depth = 1\n",
    "    # Max frontier nodes\n",
    "    max_frontier_nodes = 1    \n",
    "        \n",
    "    while not frontier.empty():                \n",
    "        node = frontier.get()\n",
    "        \n",
    "        # Number of nodes expanded\n",
    "        if node.parent:\n",
    "            nodes_expanded += 1\n",
    "            \n",
    "        # Max search depth        \n",
    "        if node.depth > max_search_depth:\n",
    "            max_search_depth = node.depth   \n",
    "        \n",
    "        if problem.goal_test(node.state):\n",
    "            print(\"Solved! Number of states explored: {}\".format(num_explored))\n",
    "            print(\"Number of nodes expanded: {}\".format(nodes_expanded))\n",
    "            print(\"Max Search Depth: {}\".format(max_search_depth))\n",
    "            #print(\"Path Cost: {}\".format(Node.path_cost))\n",
    "            print(\"Max Frontier Nodes: {}\".format(max_frontier_nodes))\n",
    "            return node   \n",
    "        \n",
    "        for child in expand(problem, node):\n",
    "            if child.state not in explored:\n",
    "                    priority = child.path_cost + heuristic1(problem.goal, child.state) \n",
    "                    frontier.put(child, priority)\n",
    "                    explored[child.state] = child"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "id": "85f38eca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 0\n",
      "Number of nodes expanded: 10\n",
      "Max Search Depth: 10\n",
      "Max Frontier Nodes: 1\n",
      "Solved! Number of states explored: 0\n",
      "Number of nodes expanded: 10\n",
      "Max Search Depth: 10\n",
      "Max Frontier Nodes: 1\n",
      "Solved! Number of states explored: 0\n",
      "Number of nodes expanded: 10\n",
      "Max Search Depth: 10\n",
      "Max Frontier Nodes: 1\n",
      "CPU times: user 612 µs, sys: 68 µs, total: 680 µs\n",
      "Wall time: 622 µs\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "maze1.get_solution(a_star(maze1, heuristic1))\n",
    "a_star(maze1, heuristic1)\n",
    "%time res = a_star(maze1, heuristic1)\n",
    "maze1.output_image()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "id": "bb35a04d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solved! Number of states explored: 0\n",
      "Number of nodes expanded: 10\n",
      "Max Search Depth: 10\n",
      "Max Frontier Nodes: 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(['up', 'right', 'right', 'right', 'right', 'up', 'up', 'right', 'up', 'up'],\n",
       " [(4, 0),\n",
       "  (4, 1),\n",
       "  (4, 2),\n",
       "  (4, 3),\n",
       "  (4, 4),\n",
       "  (3, 4),\n",
       "  (2, 4),\n",
       "  (2, 5),\n",
       "  (1, 5),\n",
       "  (0, 5)])"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maze1.get_solution(a_star(maze1, heuristic1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "2f190d38",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'<' not supported between instances of 'Node' and 'Node'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [239]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m maze2\u001b[38;5;241m.\u001b[39mget_solution(\u001b[43ma_star\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmaze2\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheuristic1\u001b[49m\u001b[43m)\u001b[49m)\n",
      "Input \u001b[0;32mIn [229]\u001b[0m, in \u001b[0;36ma_star\u001b[0;34m(problem, heuristic)\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m child\u001b[38;5;241m.\u001b[39mstate \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m explored:\n\u001b[1;32m     53\u001b[0m         priority \u001b[38;5;241m=\u001b[39m child\u001b[38;5;241m.\u001b[39mpath_cost \u001b[38;5;241m+\u001b[39m heuristic1(problem\u001b[38;5;241m.\u001b[39mgoal, child\u001b[38;5;241m.\u001b[39mstate) \n\u001b[0;32m---> 54\u001b[0m         \u001b[43mfrontier\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mput\u001b[49m\u001b[43m(\u001b[49m\u001b[43mchild\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpriority\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     55\u001b[0m         explored[child\u001b[38;5;241m.\u001b[39mstate] \u001b[38;5;241m=\u001b[39m child\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/queue.py:150\u001b[0m, in \u001b[0;36mQueue.put\u001b[0;34m(self, item, block, timeout)\u001b[0m\n\u001b[1;32m    148\u001b[0m                 \u001b[38;5;28;01mraise\u001b[39;00m Full\n\u001b[1;32m    149\u001b[0m             \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnot_full\u001b[38;5;241m.\u001b[39mwait(remaining)\n\u001b[0;32m--> 150\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_put\u001b[49m\u001b[43m(\u001b[49m\u001b[43mitem\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39munfinished_tasks \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m    152\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnot_empty\u001b[38;5;241m.\u001b[39mnotify()\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/queue.py:236\u001b[0m, in \u001b[0;36mPriorityQueue._put\u001b[0;34m(self, item)\u001b[0m\n\u001b[1;32m    235\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_put\u001b[39m(\u001b[38;5;28mself\u001b[39m, item):\n\u001b[0;32m--> 236\u001b[0m     \u001b[43mheappush\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mqueue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mitem\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[0;31mTypeError\u001b[0m: '<' not supported between instances of 'Node' and 'Node'"
     ]
    }
   ],
   "source": [
    "maze2.get_solution(a_star(maze2, heuristic1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "c689d55a",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'<' not supported between instances of 'Node' and 'Node'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [240]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m maze3\u001b[38;5;241m.\u001b[39mget_solution(\u001b[43ma_star\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmaze3\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheuristic1\u001b[49m\u001b[43m)\u001b[49m)\n",
      "Input \u001b[0;32mIn [229]\u001b[0m, in \u001b[0;36ma_star\u001b[0;34m(problem, heuristic)\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m child\u001b[38;5;241m.\u001b[39mstate \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m explored:\n\u001b[1;32m     53\u001b[0m         priority \u001b[38;5;241m=\u001b[39m child\u001b[38;5;241m.\u001b[39mpath_cost \u001b[38;5;241m+\u001b[39m heuristic1(problem\u001b[38;5;241m.\u001b[39mgoal, child\u001b[38;5;241m.\u001b[39mstate) \n\u001b[0;32m---> 54\u001b[0m         \u001b[43mfrontier\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mput\u001b[49m\u001b[43m(\u001b[49m\u001b[43mchild\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpriority\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     55\u001b[0m         explored[child\u001b[38;5;241m.\u001b[39mstate] \u001b[38;5;241m=\u001b[39m child\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/queue.py:150\u001b[0m, in \u001b[0;36mQueue.put\u001b[0;34m(self, item, block, timeout)\u001b[0m\n\u001b[1;32m    148\u001b[0m                 \u001b[38;5;28;01mraise\u001b[39;00m Full\n\u001b[1;32m    149\u001b[0m             \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnot_full\u001b[38;5;241m.\u001b[39mwait(remaining)\n\u001b[0;32m--> 150\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_put\u001b[49m\u001b[43m(\u001b[49m\u001b[43mitem\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39munfinished_tasks \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m    152\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnot_empty\u001b[38;5;241m.\u001b[39mnotify()\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/queue.py:236\u001b[0m, in \u001b[0;36mPriorityQueue._put\u001b[0;34m(self, item)\u001b[0m\n\u001b[1;32m    235\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_put\u001b[39m(\u001b[38;5;28mself\u001b[39m, item):\n\u001b[0;32m--> 236\u001b[0m     \u001b[43mheappush\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mqueue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mitem\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[0;31mTypeError\u001b[0m: '<' not supported between instances of 'Node' and 'Node'"
     ]
    }
   ],
   "source": [
    "maze3.get_solution(a_star(maze3, heuristic1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "id": "eb36bb2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "To conclude, while the implementation of the first two algorithms, namely deep-first search and iterative deepening depth-limited search, was successful,  A* failed. As observed from our outputs, Ids gives better results than dfs3. Comparing to the dfs3, by using ids, we get lower results in terms of maximum search depth, number of nodes expanded, timing and number of states explored. Moreover, in the solution of the maze 2, dfs3 could not find the shortest path while ids could find. This shows the efficiency of ids over dfs3.\n"
     ]
    }
   ],
   "source": [
    "print(\"To conclude, while the implementation of the first two algorithms, namely deep-first search and iterative deepening depth-limited search, was successful,  A* failed. As observed from our outputs, Ids gives better results than dfs3. Comparing to the dfs3, by using ids, we get lower results in terms of maximum search depth, number of nodes expanded, timing and number of states explored. Moreover, in the solution of the maze 2, dfs3 could not find the shortest path while ids could find. This shows the efficiency of ids over dfs3.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da09d249",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  },
  "vscode": {
   "interpreter": {
    "hash": "e4cce46d6be9934fbd27f9ca0432556941ea5bdf741d4f4d64c6cd7f8dfa8fba"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
