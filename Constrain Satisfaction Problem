{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9114ba0e",
   "metadata": {},
   "source": [
    "# Assignment 4\n",
    "\n",
    "Please enter your **name, surname** and **student number** instead of `\"NAME-HERE\"`, `\"SURNAME-HERE\"`, `\"NUMBER-HERE\"` below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "82b897c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'Çağrı', 'surname': 'Ertem', 'studentNumber': '2360626'}\n"
     ]
    }
   ],
   "source": [
    "student = {\n",
    "    'name' : \"Çağrı\" ,\n",
    "    'surname' : \"Ertem\", \n",
    "    'studentNumber' : \"2360626\"\n",
    "}\n",
    "\n",
    "print(student)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "628223e0",
   "metadata": {},
   "source": [
    "We will use the `python-constraint` package. To install it open terminal prompt from Anaconda, and type \n",
    "~~~~\n",
    "conda install -c conda-forge python-constraint\n",
    "~~~~\n",
    "\n",
    "Alternatively, you can use `pip` to install this package.\n",
    "~~~~\n",
    "pip install python-constraint\n",
    "~~~~\n",
    "\n",
    "To import see above i.e. `from constraint import *`. [You can find more information about the python-constraint package here](https://labix.org/python-constraint)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b03b8506",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from constraint import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e9fc2c0",
   "metadata": {},
   "source": [
    "## Scheduling Problem (30)\n",
    "Consider the problem of scheduling five tasks. Tasks can start at 1pm, 2pm or 3pm. The duration of each task is one hour. Any number of tasks can be done simultaneously but the following restrictions must be satisfied:\n",
    "\n",
    "- Task 1 must start after Task 3\n",
    "- Task 3 must start before Task 4 and after Task 5\n",
    "- Task 2 cannot be done at the same time as Task 1\n",
    "- Task 2 cannot be done at the same time as Task 4\n",
    "- Task 4 cannot start at 2\n",
    "\n",
    "Formulate the problem as a CSP and solve it using the `constraint` module. \n",
    "\n",
    "*Note:  Focus on task start times.* \n",
    "\n",
    "*Note: You can represent the domain of the tasks as integers.*\n",
    "\n",
    "*Note: You may want to check the CSP exercise notebook available in Teams.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d02e03a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "p = Problem()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c5cea88a",
   "metadata": {},
   "outputs": [],
   "source": [
    "domain = [1, 2, 3]\n",
    "\n",
    "p.addVariable(\"Task1\", domain)\n",
    "p.addVariable(\"Task2\", domain)\n",
    "p.addVariable(\"Task3\", domain)\n",
    "p.addVariable(\"Task4\", domain)\n",
    "p.addVariable(\"Task5\", domain)\n",
    "\n",
    "p.addConstraint(lambda x,y : x > y, (\"Task1\",\"Task3\"))\n",
    "p.addConstraint(lambda x,y,z : (x < y) and (x > z), (\"Task3\",\"Task4\",\"Task5\"))\n",
    "p.addConstraint(lambda x,y,z : (x != y) and (x != z) and (z != 2), (\"Task2\",\"Task1\", \"Task4\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "df530144",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'Task1': 3, 'Task3': 2, 'Task4': 3, 'Task5': 1, 'Task2': 2},\n",
       " {'Task1': 3, 'Task3': 2, 'Task4': 3, 'Task5': 1, 'Task2': 1}]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p.getSolutions()"
   ]
  },
  {
   "attachments": {
    "NQueens.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "90d97f3f",
   "metadata": {},
   "source": [
    "## 4-Queens Problem as a CSP (30)\n",
    "\n",
    "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/4_queens.JPG/640px-4_queens.JPG\" alt=\"Four Queens\" style=\"width: 350px;\"/>\n",
    "\n",
    "In 4-Queens problem is placing 4 Queens on a $4 \\times 4$ chess board with none of the Queens attacking each other. *You can check course slides about Search for 8-Queens version of this problem.*\n",
    "\n",
    "![NQueens.png](attachment:NQueens.png)\n",
    "\n",
    "In this question you can consider the *4-queens problem* where each queen is associated with a row and can be assigned to any column in the row. Therefore the domains of each variable can be considered as which column you put the queen.\n",
    "\n",
    "Define this problem as a CSP, and solve it using the `constraint` package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8e3f10c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "fq = Problem()\n",
    "\n",
    "domain = [0,1,2,3]\n",
    "\n",
    "fq.addVariable(\"r0\",domain)\n",
    "fq.addVariable(\"r1\",domain)\n",
    "fq.addVariable(\"r2\",domain)\n",
    "fq.addVariable(\"r3\",domain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9ba7f8be",
   "metadata": {},
   "outputs": [],
   "source": [
    "fq.addConstraint(AllDifferentConstraint(), ['r0', 'r1', 'r2', 'r3'])\n",
    "\n",
    "fq.addConstraint(lambda x,y : ((x + 1) != y) and ((x - 1) != y) , ('r0','r1'))\n",
    "fq.addConstraint(lambda x,y : ((x + 1) != y) and ((x - 1) != y) , ('r1','r2'))\n",
    "fq.addConstraint(lambda x,y : ((x + 1) != y) and ((x - 1) != y), ('r2','r3'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5b641b34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'r1': 3, 'r2': 0, 'r0': 1, 'r3': 2}, {'r1': 0, 'r2': 3, 'r0': 2, 'r3': 1}]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fq.getSolutions()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "346dd7f5",
   "metadata": {},
   "source": [
    "## 4-Queens Problem as a Logical Problem (40)\n",
    "\n",
    "In this part you are expected solve 4-Queens problem using propositional logic and the model checking approach. Please use the `logic.py` module encolsed with the homework. This is the same module that we discussed in the class. Below we export `logic.py` module. Note that the `logic.py` need to be at the same folder as this notebook.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7a2455f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from logic import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cba9e13",
   "metadata": {},
   "source": [
    "In this question, we will have a propositional symbol $q_{ij}$ (`qij`) for each possible placement of queen on row $i$ and column $j$. $q_{ij}$ is $true$ when there is a queen on row $i$ and column $j$. For example $q_{02}$ (`q02`) is $true$ if we have a queen on the first row and third column. Note that the indexing starts at 0. We have 16 symbols."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "703529a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We define a symbol qij that is true when there is queen in row i and column j\n",
    "symbols = []\n",
    "\n",
    "knowledge = And()\n",
    "\n",
    "for row in range(4):\n",
    "    for col in range(4):\n",
    "        symbols.append(Symbol(f\"q{row}{col}\"))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f390b0d3",
   "metadata": {},
   "source": [
    "Next, you will add statements regarding there will exactly one queen on each row, and exactly one queen on each column, and queens must not attack each other diagnoally to your knowledge base. You probably need to define these using `for` loops as there will be numerous sentences. I recommend checking the examples shown in the class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c7e000a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exactly one queen in row i            \n",
    "\n",
    "for row in range(4):\n",
    "    knowledge.add(Or(\n",
    "        Symbol(f\"q{row}0\"),\n",
    "        Symbol(f\"q{row}1\"),\n",
    "        Symbol(f\"q{row}2\"),\n",
    "        Symbol(f\"q{row}3\")))\n",
    "    \n",
    "for row in range(4):\n",
    "    for i in range(4):\n",
    "        for j in range(4):\n",
    "            if i != j:\n",
    "                knowledge.add(Implication(\n",
    "                    Symbol(f\"q{row}{i}\"), Not(Symbol(f\"q{row}{j}\"))))    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a70a1e01",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exactly one queen in column j            \n",
    "\n",
    "for column in range(4):\n",
    "    knowledge.add(Or(\n",
    "        Symbol(f\"q0{column}\"),\n",
    "        Symbol(f\"q1{column}\"),\n",
    "        Symbol(f\"q2{column}\"),\n",
    "        Symbol(f\"q3{column}\")))\n",
    "    \n",
    "for column in range(4):\n",
    "    for x in range(4):\n",
    "        for y in range(4):\n",
    "            if x != y:\n",
    "                knowledge.add(Implication(\n",
    "                    Symbol(f\"q{x}{column}\"), Not(Symbol(f\"q{y}{column}\"))))    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ca1647e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# At most one queen in each diagonal\n",
    "\n",
    "for row in range(4):\n",
    "    for column in range(4):\n",
    "        for t in range(1, 4):\n",
    "            if (row + t <= 3) and (column + t <= 3):\n",
    "                knowledge.add(Implication(Symbol(f\"q{row}{column}\"), Not(Symbol(f\"q{row + t}{column + t}\"))))\n",
    "            if (row + t <= 3) and (column - t >= 0):\n",
    "                knowledge.add(Implication(Symbol(f\"q{row}{column}\"), Not(Symbol(f\"q{row + t}{column - t}\"))))\n",
    "            if (row - t >= 0) and (column + t <= 3):\n",
    "                knowledge.add(Implication(Symbol(f\"q{row}{column}\"), Not(Symbol(f\"q{row - t}{column + t}\"))))\n",
    "            if (row - t >= 0) and (column - t >= 0):\n",
    "                knowledge.add(Implication(Symbol(f\"q{row}{column}\"), Not(Symbol(f\"q{row - t}{column - t}\"))))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afc0926b",
   "metadata": {},
   "source": [
    "Finally you apply model checking to see which symbols are true or are not false. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1afa1e80",
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_knowledge(knowledge):\n",
    "    for symbol in symbols:\n",
    "        if model_check(knowledge, symbol):\n",
    "            print(f\"{symbol}: YES\")\n",
    "        elif not model_check(knowledge, Not(symbol)):\n",
    "            print(f\"{symbol}: MAYBE\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f5f9c921",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "q01: MAYBE\n",
      "q02: MAYBE\n",
      "q10: MAYBE\n",
      "q13: MAYBE\n",
      "q20: MAYBE\n",
      "q23: MAYBE\n",
      "q31: MAYBE\n",
      "q32: MAYBE\n"
     ]
    }
   ],
   "source": [
    "check_knowledge(knowledge)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60c10780",
   "metadata": {},
   "source": [
    "If you have correctly defined your knowledge base, this code should print\n",
    "\n",
    "~~~~python\n",
    "q01: MAYBE\n",
    "q02: MAYBE\n",
    "q10: MAYBE\n",
    "q13: MAYBE\n",
    "q20: MAYBE\n",
    "q23: MAYBE\n",
    "q31: MAYBE\n",
    "q32: MAYBE\n",
    "~~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c7b53d6",
   "metadata": {},
   "source": [
    "In order to find a specific solution, we need to add the place of the knowledge base as well. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5bf79714",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "q01: YES\n",
      "q13: YES\n",
      "q20: YES\n",
      "q32: YES\n"
     ]
    }
   ],
   "source": [
    "knowledge.add(Symbol(\"q01\"))\n",
    "check_knowledge(knowledge)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29b9a06b",
   "metadata": {},
   "source": [
    "If you have correctly defined your knowledge base you should see\n",
    "\n",
    "~~~~\n",
    "q01: YES\n",
    "q13: YES\n",
    "q20: YES\n",
    "q32: YES\n",
    "~~~~"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db2fab6a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
