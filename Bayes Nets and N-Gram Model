{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 5\n",
    "\n",
    "Please enter your **name, surname** and **student number** instead of `\"NAME-HERE\"`, `\"SURNAME-HERE\"`, `\"NUMBER-HERE\"` below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'Çağrı', 'surname': 'Ertem', 'studentNumber': '2360626'}\n"
     ]
    }
   ],
   "source": [
    "student = {\n",
    "    'name' : \"Çağrı\" ,\n",
    "    'surname' : \"Ertem\", \n",
    "    'studentNumber' : \"2360626\"\n",
    "}\n",
    "\n",
    "print(student)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pomegranate import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the `pomegranate` package. To install it open terminal prompt from Anaconda, and type \n",
    "~~~~\n",
    "conda install -c anaconda pomegranate\n",
    "~~~~\n",
    "\n",
    "Alternatively, you can use `pip` to install this package.\n",
    "~~~~\n",
    "pip install pomegranate\n",
    "~~~~\n",
    "\n",
    "To import see above i.e. `from pomegranate import *`. [You can find more information about the python-constraint package here](https://labix.org/python-constraint)."
   ]
  },
  {
   "attachments": {
    "Late%20BN-Page-4.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 1 - Bayesian Networks\n",
    "![Late%20BN-Page-4.png](attachment:Late%20BN-Page-4.png)\n",
    "\n",
    "1-a) Above you see a Bayesian network **(20 points)**\n",
    "\n",
    "- Implement this Bayesian network in `pomegranate`.\n",
    "- Calculate $P(A= ay| C= cy, D= dy)$ in `pomegranate`. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4752600063031832\n"
     ]
    }
   ],
   "source": [
    "node_A = Node(DiscreteDistribution({'ay': 0.1, 'an': 0.9}), name=\"A\")\n",
    "\n",
    "#P(B/A)\n",
    "PBA = ConditionalProbabilityTable([\n",
    "    ['ay','by', 0.85],              \n",
    "    ['ay', 'bn', 0.15],\n",
    "    ['an','by', 0.5],\n",
    "    ['an','bn',0.5]\n",
    "    ], [node_A.distribution])\n",
    "\n",
    "node_B = Node(PBA, name=\"B\")\n",
    "\n",
    "#P(C/A)\n",
    "PCA = ConditionalProbabilityTable([\n",
    "    ['ay','cy', 0.8],              \n",
    "    ['ay', 'cn', 0.2],\n",
    "    ['an','cy', 0.1],\n",
    "    ['an','cn',0.9]\n",
    "    ], [node_A.distribution])\n",
    "\n",
    "node_C = Node(PCA, name=\"C\")\n",
    "\n",
    "#P(D/B,C)\n",
    "PDBC = ConditionalProbabilityTable([\n",
    "    ['by','cy', 'dy', 0.95],              \n",
    "    ['by', 'cy', 'dn', 0.05],\n",
    "    ['by','cn', 'dy', 0.9],\n",
    "    ['by', 'cn', 'dn', 0.1],\n",
    "    ['bn', 'cy', 'dy', 0.9],\n",
    "    ['bn', 'cy', 'dn', 0.1],\n",
    "    ['bn', 'cn', 'dy', 0.01],\n",
    "    ['bn', 'cn', 'dn', 0.99]\n",
    "    ], [node_B.distribution, node_C.distribution])\n",
    "\n",
    "node_D = Node(PDBC, name=\"D\")\n",
    "\n",
    "model = BayesianNetwork()\n",
    "\n",
    "model.add_nodes(node_A, node_B, node_C, node_D)\n",
    "\n",
    "model.add_edge(node_A, node_B)\n",
    "model.add_edge(node_A, node_C)\n",
    "model.add_edge(node_B, node_D)\n",
    "model.add_edge(node_C, node_D)\n",
    "\n",
    "model.bake()\n",
    "\n",
    "prob_ev1 = model.probability([[\"ay\", \"by\", \"cy\", \"dy\"]])\n",
    "prob_ev2 = model.probability([[\"an\", \"by\", \"cy\", \"dy\"]])\n",
    "prob_ev3 = model.probability([[\"ay\", \"bn\", \"cy\", \"dy\"]])\n",
    "prob_ev4 = model.probability([[\"an\", \"bn\", \"cy\", \"dy\"]])\n",
    "\n",
    "print((prob_ev1 + prob_ev3) / (prob_ev1 + prob_ev2 + prob_ev3 + prob_ev4)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 2 - N-Gram Model\n",
    "\n",
    "In this section, you will build a simple language model that can be used to generate random text resembling a source document. Your use of external code **should be limited to built-in Python modules**, which excludes, for example, NumPy and NLTK.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2-a) **(5 points)** Write a simple tokenization function tokenize(text) which takes as input a string of text and returns a list of tokens derived from that text. Here, we define a token to be a contiguous sequence of non-whitespace characters, with the exception that any punctuation mark should be treated as an individual token. Hint: Use the built-in constant string.punctuation, found in the string module. \n",
    "\n",
    "~~~~python\n",
    ">>> tokenize(\"  This is an example.  \")\n",
    "['This', 'is', 'an', 'example', '.']\n",
    "~~~~\n",
    "\n",
    "~~~~python\n",
    ">>> tokenize(\"'Medium-rare,' she said.\")\n",
    "[\"'\", 'Medium', '-', 'rare', ',', \"'\", 'she', 'said', '.']\n",
    "~~~~"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "import string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "string.punctuation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[\"'\", 'Medium', '-', 'rare', ',', \"'\", 'she', 'said', '.']"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def tokenize(text):      \n",
    "    tokens = []    \n",
    "    for punct in string.punctuation:\n",
    "        text = text.replace(punct, \" {} \".format(punct))\n",
    "        words = text.split()\n",
    "    for word in words:\n",
    "        tokens.append(word)  \n",
    "    return tokens\n",
    "\n",
    "tokenize(\"'Medium-rare,' she said.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2-b) **(10 points)** Write a function `ngrams(n, tokens)` that produces a list of all n-grams of the specified size from the input token list. Each $n$-gram should consist of a 2-element tuple (context, token), where the context is itself an $(n−1)$-element tuple comprised of the $n−1$ words preceding the current token. The sentence should be padded with $n−1$ \"`<START>`\" tokens at the beginning and a single \"`<END>`\" token at the end. If $n=1$, all contexts should be empty tuples. You may assume that $n≥1$. \n",
    "\n",
    "~~~~python\n",
    ">>> ngrams(1, [\"a\", \"b\", \"c\"])\n",
    "[((), 'a'), ((), 'b'), ((), 'c'), ((), '<END>')]\n",
    "~~~~\n",
    "\n",
    "\n",
    "~~~python\n",
    ">>> ngrams(2, [\"a\", \"b\", \"c\"])\n",
    "[(('<START>',), 'a'), (('a',), 'b'), (('b',), 'c'), (('c',), '<END>')]\n",
    "~~~~\n",
    "\n",
    "\n",
    "\n",
    "~~~~python\n",
    ">>> ngrams(3, [\"a\", \"b\", \"c\"])\n",
    "[(('<START>', '<START>'), 'a'), (('<START>', 'a'), 'b'), (('a', 'b'), 'c'), (('b', 'c'), '<END>')]\n",
    "~~~~\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[((), 'a'), ((), 'b'), ((), 'c'), ((), '<END>')]\n",
      "[(('<START>',), 'a'), (('a',), 'b'), (('b',), 'c'), (('c',), '<END>')]\n",
      "[(('<START>', '<START>'), 'a'), (('<START>', 'a'), 'b'), (('a', 'b'), 'c'), (('b', 'c'), '<END>')]\n"
     ]
    }
   ],
   "source": [
    "def ngrams(n, tokens):\n",
    "    output_list = []\n",
    "    start = [\"<START>\"] * (n-1)\n",
    "    end = [\"<END>\"]\n",
    "    \n",
    "    tokens = start + tokens + end\n",
    "    \n",
    "    for i in range(len(tokens)-(n-1)):\n",
    "        padding_list = []\n",
    "        for j in range(n-1):\n",
    "            padding_list.append(tokens[i+j])\n",
    "        output_list.append((tuple(padding_list), tokens[i+(n-1)]))\n",
    "        \n",
    "    return output_list\n",
    "\n",
    "print(ngrams(1, [\"a\", \"b\", \"c\"]))\n",
    "print(ngrams(2, [\"a\", \"b\", \"c\"]))\n",
    "print(ngrams(3, [\"a\", \"b\", \"c\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note: Code block for questions 2-c to 2-f are at the end of this notebook.**\n",
    "\n",
    "2-c) **(10 points)** In the `NgramModel` class, write an initialization method `__init__(self, n)` which stores the order $n$ of the model and initializes any necessary internal variables. Then write a method `update(self, sentence)` which computes the $n$-grams for the input sentence and updates the internal counts. Lastly, write a method `prob(self, context, token)` which accepts an $(n−1)$-tuple representing a context and a token, and returns the probability of that token occuring, given the preceding context. \n",
    "\n",
    "~~~~python\n",
    ">>> m = NgramModel(1)\n",
    ">>> m.update(\"a b c d\")\n",
    ">>> m.update(\"a b a b\")\n",
    ">>> m.prob((), \"a\")\n",
    "0.3\n",
    ">>> m.prob((), \"c\")\n",
    "0.1\n",
    ">>> m.prob((), \"<END>\")\n",
    "0.2\n",
    "~~~~\n",
    "\n",
    "<hr>\n",
    "\n",
    "~~~~python\n",
    ">>> m = NgramModel(2)\n",
    ">>> m.update(\"a b c d\")\n",
    ">>> m.update(\"a b a b\")\n",
    ">>> m.prob((\"<START>\",), \"a\")\n",
    "1.0\n",
    ">>> m.prob((\"b\",), \"c\")\n",
    "0.3333333333333333\n",
    ">>> m.prob((\"a\",), \"x\")\n",
    "0.0\n",
    "~~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2-d) **(20 points)** In the `NgramModel` class, write a method `random_token(self, context)` which returns a random token according to the probability distribution determined by the given context. Specifically, let $T=⟨t1,t2,⋯,tn⟩$ be the set of tokens which can occur in the given context, sorted according to Python’s natural lexicographic ordering, and let $0≤r<1$ be a random number between $0$ and $1$. Your method should return the token $t_i$ such that \n",
    "\n",
    "$$\\sum_{j=1}^{i-1}P(t_j | context) \\leq r < \\sum_{j=1}^{i}P(t_j | context)$$\n",
    "\n",
    "You should use a single call to the `random.random()` function to generate $r$.\n",
    "\n",
    "~~~~python\n",
    ">>> m = NgramModel(1)\n",
    ">>> m.update(\"a b c d\")\n",
    ">>> m.update(\"a b a b\")\n",
    ">>> random.seed(1)\n",
    ">>> [m.random_token(())\n",
    "     for i in range(25)]\n",
    "['<END>', 'c', 'b', 'a', 'a', 'a', 'b', 'b', '<END>', '<END>', 'c', 'a', 'b', '<END>', 'a', 'b', 'a', 'd', 'd', '<END>', '<END>', 'b', 'd', 'a', 'a']\n",
    "~~~~\n",
    "\n",
    "<br>\n",
    "\n",
    "~~~~python\n",
    ">>> m = NgramModel(2)\n",
    ">>> m.update(\"a b c d\")\n",
    ">>> m.update(\"a b a b\")\n",
    ">>> random.seed(2)\n",
    ">>> [m.random_token((\"<START>\",)) for i in range(6)]\n",
    "['a', 'a', 'a', 'a', 'a', 'a']\n",
    ">>> [m.random_token((\"b\",)) for i in range(6)]\n",
    "['c', '<END>', 'a', 'a', 'a', '<END>']\n",
    "\n",
    "~~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.e) **(20 points)** In the `NgramModel` class, write a method `random_text(self, token_count)` which returns a string of space-separated tokens chosen at random using the random_token(self, context) method. Your starting context should always be the $(n−1)$-tuple `(\"<START>\", ..., \"<START>\")`, and the context should be updated as tokens are generated. If $n=1$, your context should always be the empty tuple. Whenever the special token `\"<END>\"` is encountered, you should reset the context to the starting context.\n",
    "\n",
    "~~~~python\n",
    ">>> m = NgramModel(1)\n",
    ">>> m.update(\"a b c d\")\n",
    ">>> m.update(\"a b a b\")\n",
    ">>> random.seed(1)\n",
    ">>> m.random_text(13)\n",
    "'<END> c b a a a b b <END> <END> c a b'\n",
    "~~~~\n",
    "\n",
    "<br>\n",
    "\n",
    "~~~~python\n",
    ">>> m = NgramModel(2)\n",
    ">>> m.update(\"a b c d\")\n",
    ">>> m.update(\"a b a b\")\n",
    ">>> random.seed(2)\n",
    ">>> m.random_text(15)\n",
    "'a b <END> a b c d <END> a b a b a b c'\n",
    "~~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.f) **(15 points)** Write a function `create_ngram_model(n, path)` which loads the text at the given path and creates an $n$-gram model from the resulting data. Each line in the file should be treated as a separate sentence.\n",
    "\n",
    "Test this function with `frankenstein.txt` given with the homework. Note that the test cases below assumes that `frankenstein.txt` is in the same folder as this notebook.\n",
    "\n",
    "*Hint: Check online tutorials about how to read text files in Python such [as this one](https://www.pythontutorial.net/python-basics/python-read-text-file/).*\n",
    "\n",
    "~~~python\n",
    "# No random seeds, so your results may vary\n",
    ">>> m = create_ngram_model(1, \"frankenstein.txt\"); m.random_text(15)\n",
    "'beat astonishment brought his for how , door <END> his . pertinacity to I felt'\n",
    ">>> m = create_ngram_model(2, \"frankenstein.txt\"); m.random_text(15)\n",
    "'As the great was extreme during the end of being . <END> Fortunately the sun'\n",
    ">>> m = create_ngram_model(3, \"frankenstein.txt\"); m.random_text(15)\n",
    "'I had so long inhabited . <END> You were thrown , by returning with greater'\n",
    ">>> m = create_ngram_model(4, \"frankenstein.txt\"); m.random_text(15)\n",
    "'We were soon joined by Elizabeth . <END> At these moments I wept bitterly and'\n",
    "~~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bonus - **(20 points)** Suppose we define the perplexity of a sequence of m tokens $⟨w_1,w_2,⋯,w_m⟩$ to be\n",
    "\n",
    "$$\\sqrt[m]{\\cfrac{1}{P(w_1,w_2,\\dots,w_m}}$$\n",
    "\n",
    "\n",
    "For example, in the case of a bigram model under the framework used in the rest of the assignment, we would generate the bigrams $⟨(w_0=⟨\\text{START}⟩,w_1),(w_1,w_2),⋯,(w_{m−1},w_m),(w_m,w_{m+1}=⟨\\text{END}⟩)⟩$\n",
    ", and would then compute the perplexity as\n",
    "\n",
    "$$\\sqrt[{m+1}]{\\prod_{i=1}^{m+1} \\cfrac{1}{P(w_i|w_{i-1})}}$$\n",
    "\n",
    "\n",
    "Intuitively, the lower the perplexity, the better the input sequence is explained by the model. Higher values indicate the input was “perplexing” from the model’s point of view, hence the term perplexity.\n",
    "\n",
    "In the `NgramModel` class, write a method `perplexity(self, sentence)` which computes the $n$-grams for the input sentence and returns their perplexity under the current model. \n",
    "\n",
    "*Hint: Consider performing an intermediate computation in log-space and re-exponentiating at the end, so as to avoid numerical overflow.*\n",
    "\n",
    "~~~~python\n",
    ">>> m = NgramModel(1)\n",
    ">>> m.update(\"a b c d\")\n",
    ">>> m.update(\"a b a b\")\n",
    ">>> m.perplexity(\"a b\")\n",
    "3.815714141844439\n",
    "~~~~\n",
    "\n",
    "~~~~python\n",
    ">>> m = NgramModel(2)\n",
    ">>> m.update(\"a b c d\")\n",
    ">>> m.update(\"a b a b\")\n",
    ">>> m.perplexity(\"a b\")\n",
    "1.4422495703074083\n",
    "~~~~~\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "import random\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [],
   "source": [
    "class NgramModel(object):\n",
    "\n",
    "    def __init__(self, n):\n",
    "        self.n = n\n",
    "        self.ngrams = []\n",
    "        self.tokens = []\n",
    "        \n",
    "    def update(self, sentence):\n",
    "        self.ngrams = self.ngrams + ngrams(self.n, tokenize(sentence))\n",
    "        self.tokens = self.tokens + tokenize(sentence)\n",
    "        \n",
    "    def prob(self, context, token):\n",
    "        c = Counter(self.ngrams)\n",
    "        x_token = c[(context, token)]\n",
    "        y_context = len(self.ngrams)\n",
    "        \n",
    "        result = x_token / y_context\n",
    "        return result    \n",
    "        \n",
    "    def random_token(self, context):          \n",
    "        r = random.random()\n",
    "        p = []\n",
    "        t = []\n",
    "        t.append(r)        \n",
    "\n",
    "        for c, token in self.ngrams:\n",
    "            if c == context:\n",
    "                p.append(random.choice(token))\n",
    "                        \n",
    "        if t[0] >= 0.5:\n",
    "            return random_token(self, context)\n",
    "        elif t[0] < 0.5:\n",
    "            return random_token(self, context)\n",
    "        else:\n",
    "            return p\n",
    "    \n",
    "    def random_text(self, token_count):\n",
    "        text =[] \n",
    "        s = [\"<START>\" for i in range(self.n)]\n",
    "        for i in range(token_count):\n",
    "            text.append(self.random_token(s))\n",
    "        return \" \".join(text)\n",
    "    \n",
    "    def perplexity(self, sentence):\n",
    "        pass\n",
    "\n",
    "\n",
    "def create_ngram_model(n, path):\n",
    "    m = NgramModel(n)\n",
    "    \n",
    "    with open(path) as f:\n",
    "        for i in f.readlines():\n",
    "            m.update(i)\n",
    "    return m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3\n",
      "0.1\n",
      "0.2\n",
      "['a', 'a', 'a', 'a', 'a']\n",
      "a a a a a\n",
      "0.2\n",
      "0.1\n",
      "0.0\n",
      "['a', 'a', 'a', 'a', 'a']\n",
      "a a a a a\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Letter Letter Letter Letter Letter Letter Letter Letter Letter Letter Letter Letter Letter Letter Letter'"
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m = NgramModel(1)\n",
    "m.update(\"a b c d\")\n",
    "m.update(\"a b a b\")\n",
    "\n",
    "print(m.prob((), \"a\"))\n",
    "print(m.prob((), \"c\"))\n",
    "print(m.prob((), \"<END>\"))\n",
    "\n",
    "random.seed(1)\n",
    "print([m.random_token((\"<START>\",)) for i in range(5)])\n",
    "print(m.random_text(5))\n",
    "\n",
    "m = NgramModel(2)\n",
    "m.update(\"a b c d\")\n",
    "m.update(\"a b a b\")\n",
    "\n",
    "print(m.prob((\"<START>\",), \"a\"))\n",
    "print(m.prob((\"b\",), \"c\"))\n",
    "print(m.prob((\"a\",), \"x\"))\n",
    "\n",
    "random.seed(2)\n",
    "print([m.random_token((\"<START>\",)) for i in range(5)])\n",
    "print(m.random_text(5))\n",
    "m = create_ngram_model(1, \"frankenstein.txt\"); m.random_text(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.perplexity(\"a b\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5879447117944846"
      ]
     },
     "execution_count": 291,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random.random()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(('<START>',), 'a'),\n",
       " (('a',), 'b'),\n",
       " (('b',), 'c'),\n",
       " (('c',), 'd'),\n",
       " (('d',), '<END>'),\n",
       " (('<START>',), 'a'),\n",
       " (('a',), 'b'),\n",
       " (('b',), 'a'),\n",
       " (('a',), 'b'),\n",
       " (('b',), '<END>')]"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.ngrams"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
